#!/isan/bin/nxpython

import signal
import datetime
import time
import threading
import sys
import os
import json
import re
import urllib2
from pprint import pprint

### To gain access to Cisco NXOS Infra SDK
import nx_sdk_py

### Global Variables
cliP                = 0
sdk                 = 0
event_hdlr          = True
parent_id           = ""
gm_id               = ""
correction_threshold = 100000
intf_state_dict     = {}

# in nanoseconds
MAX_CORRECTION_VAL = 10
MAX_ENTRIES_TO_CHECK = 5
# in seconds
DELAY_BETWEEN_CHECK = 5
# interfaces that are connected to the GM.  FIXME: define it via CLI
GM_INTERFACES=["Eth1/41", "Eth1/42"]

def shutdown_interface(intf):
    file = open("/tmp/nxsdk_cmd", "w")
    file.write("int %s\n" % intf)
    file.write("shut\n")
    file.close()
    os.system("cat /tmp/nxsdk_cmd")
    os.system("vsh -r /tmp/nxsdk_cmd")

def prevent_rogue_gm():
    global cliP, sdk

    t = sdk.getTracer()
    print("prevent_rogue_gm()")
    resp_str = cliP.execShowCmd("show ptp brief", nx_sdk_py.R_JSON)
    # print("resp_str: %s\n" % resp_str)
    resp_json = json.loads(resp_str)
    index = 0
    for entry in resp_json["TABLE_ptp"]["ROW_ptp"]["ptp-ifindex"]:
        print("entry = %s, index = %d" % (entry, index))
        if (entry not in GM_INTERFACES):
            print("shouldn't be GM, index = %d" % index)
            # print resp_json["TABLE_ptp"]["ROW_ptp"]["state"]
            # print resp_json["TABLE_ptp"]["ROW_ptp"]["state"][0]
            state = resp_json["TABLE_ptp"]["ROW_ptp"]["state"][index]
            print state
            if (state == "slave"):
                print("-- is slave")
                # shut it down
                syslog_str = "[%s] PTP GM should not be on interface %s, " \
                    "shutting down" % (sdk.getAppName(), entry)
                t.syslog(t.ERR, str(syslog_str))
                shutdown_interface(entry)
        index = index + 1

def check_interface_state_change():
    global intf_state_dict, cliP, sdk

    t = sdk.getTracer()
    print("check_interface_state_change()")
    resp_str = cliP.execShowCmd("show ptp brief", nx_sdk_py.R_JSON)
    resp_json = json.loads(resp_str)
    index = 0
    for entry in resp_json["TABLE_ptp"]["ROW_ptp"]["ptp-ifindex"]:
        state = resp_json["TABLE_ptp"]["ROW_ptp"]["state"][index]
        print("entry = %s, state = %s" % (entry, state))
        if entry in intf_state_dict:
            old_state = intf_state_dict[entry]
            # print("old_state: %s" % intf_state_dict[entry])
            if (state != old_state):
                syslog_str = "[%s] PTP port state change: port = %s, " \
                    "old state = %s, new state = %s" % \
                    (sdk.getAppName(), entry, old_state, state)
                t.syslog(t.NOTICE, str(syslog_str))
                print(str(syslog_str))
        intf_state_dict[entry] = state
        index = index + 1

def check_ptp_corrections():
    global cliP, sdk, correction_threshold

    t = sdk.getTracer()
    print("check_ptp_corrections()")
    print correction_threshold

    resp_str = cliP.execShowCmd("show ptp corrections", nx_sdk_py.R_JSON)
    # print("resp_str: %s\n" % resp_str)

    resp_json = json.loads(resp_str)
    entry_count = 1
    high_correction_found = False

    # if there's no corrections, exit
    if ("TABLE_ptp" not in resp_json):
        return

    for entry in resp_json["TABLE_ptp"]["ROW_ptp"]:
        correction_val = entry["correction-val"]
        if (abs(int(correction_val)) > correction_threshold):
            syslog_str = "[%s] PTP correction too high: correction=%s" % \
                (sdk.getAppName(), correction_val)
            # print(str(syslog_str))
            high_correction_found = True
            break
        if (entry_count > MAX_ENTRIES_TO_CHECK):
            return
        entry_count += 1

    if (high_correction_found):
        t.syslog(t.WARNING, str(syslog_str))
        print(str(syslog_str))

def check_ptp_parent_and_gm_id():
    global cliP, sdk, parent_id, gm_id

    t = sdk.getTracer()
    print("check_ptp_parent_and_gm_id()")
    resp_str = cliP.execShowCmd("show ptp parent", nx_sdk_py.R_JSON)
    resp_json = json.loads(resp_str)
    new_parent_id = resp_json["clock-id"]
    new_gm_id = resp_json["gm-id"]
    print("parent = %s, gm = %s, new parent = %s, new gm = %s" \
        % (parent_id, gm_id, new_parent_id, new_gm_id))
    if (new_parent_id != parent_id and parent_id != ""):
        syslog_str = "[%s] PTP parent id change: old = %s, new = %s" % \
              (sdk.getAppName(), parent_id, new_parent_id)
        t.syslog(t.ALERT, str(syslog_str))
        print(str(syslog_str))
    if (new_gm_id != gm_id and gm_id != ""):
        syslog_str = "[%s] PTP GM id change: old = %s, new = %s" % \
              (sdk.getAppName(), gm_id, new_gm_id)
        t.syslog(t.ALERT, str(syslog_str))
    parent_id = new_parent_id
    gm_id = new_gm_id

def timerThread(name,val):
    global cliP, sdk

    while True:
        if sdk and cliP:
           print "timer kicked - sdk"
           check_ptp_corrections()
           check_ptp_parent_and_gm_id()
           check_interface_state_change()
           prevent_rogue_gm()
        else:
           print "timer ticked - not sdk"
        time.sleep(5)

class pyCmdHandler(nx_sdk_py.NxCmdHandler):
        def postCliCb(self,clicmd):
                global cliP, pattern_path_dict, correction_threshold

                sensor_grp_id = 0

                ### Create Int Pointer to get the integer Value
                int_p = nx_sdk_py.new_intp()
                int_p = nx_sdk_py.void_to_int(clicmd.getParamValue("<correction-threshold-value>"))

                ### Get the value of int * in python
                if int_p:
                   correction_threshold = int(nx_sdk_py.intp_value(int_p))

                print correction_threshold

                if "set_ptp_correction_threshold_cmd" in clicmd.getCmdName():
                   if "no" in clicmd.getCmdLineStr():
                       print "delete cmd"
                   else:
                       print "add cmd"
                return True

### perform the event handling loop in a dedicated Python thread.
### All SDK related activities happen here, while the main thread
### may continue to do other work.  The call to startEventLoop will
### block until we break out of it by calling stopEventLoop on
def evtThread(name,val):
    global cliP, sdk, event_hdlr

    sdk = nx_sdk_py.NxSdk.getSdkInst(len(sys.argv), sys.argv)
    if not sdk:
        return

    sdk.setAppDesc('PTP Monitoring')

    t = sdk.getTracer()
    t.event("[%s] Started service" % sdk.getAppName())

    cliP = sdk.getCliParser()
    nxcmd = cliP.newConfigCmd("set_ptp_correction_threshold_cmd", \
        "correction-threshold <correction-threshold-value>")
    nxcmd.updateKeyword("correction-threshold", "Correction threshold for monitoring")
    nxcmd.updateParam("<correction-threshold-value>", \
        "Correction threshold value in nanoseconds", \
        nx_sdk_py.P_INTEGER)

    ### define our application callback for this new command
    mycmd = pyCmdHandler()
    cliP.setCmdHandler(mycmd)

    ### install the new commands to the NXOS parse tree
    t.event("Adding commands to CLIS parse tree")
    cliP.addToParseTree()

    ### block in the event loop to service NXOS messages
    print("Starting event loop, CTRL-C to interrupt")
    sdk.startEventLoop()

    ### got here by calling stopEventLoop from signal handler
    t.event("Service Quitting...!")
    event_hdlr = False

    ### [Required] Needed for graceful exit.
    nx_sdk_py.NxSdk.__swig_destroy__(sdk)

# main

### Create a Timer thread to poll for any changes in the DNs matching
### the custom DN paatern
timer_thread = threading.Thread(target=timerThread, args=("timerThread",0))
timer_thread.daemon = True

### Create a Event Thread to register with NxSDK, CLI Parser, Tracer
### and Start Event loop to keep the application running.
### NOTE: Doesnt need a special Event Thread can be done on Main too.
evt_thread = threading.Thread(target=evtThread, args=("evtThread",0))

evt_thread.start()
timer_thread.start()
evt_thread.join()
